#!/bin/bash

# Neovim Development Environment Setup Script
# This script installs Neovim, mise, and sets up a complete development environment

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Detect OS
detect_os() {
    case "$(uname -s)" in
        Linux*)     OS="linux";;
        Darwin*)    OS="macos";;
        CYGWIN*|MINGW*|MSYS*) OS="windows";;
        *)          OS="unknown";;
    esac
    echo $OS
}

# Install system dependencies
install_system_deps() {
    local os=$(detect_os)
    log_info "Installing system dependencies for $os..."
    
    case $os in
        "linux")
            # Check for package manager
            if command_exists apt-get; then
                log_info "Using apt package manager"
                sudo apt-get update
                sudo apt-get install -y \
                    curl \
                    git \
                    build-essential \
                    unzip \
                    gettext \
                    cmake \
                    pkg-config \
                    libtool \
                    libtool-bin \
                    autoconf \
                    automake \
                    g++ \
                    make \
                    wget \
                    ripgrep \
                    fd-find \
                    fzf
            elif command_exists dnf; then
                log_info "Using dnf package manager"
                sudo dnf install -y \
                    curl \
                    git \
                    gcc \
                    gcc-c++ \
                    make \
                    unzip \
                    gettext \
                    cmake \
                    pkgconfig \
                    libtool \
                    autoconf \
                    automake \
                    wget \
                    ripgrep \
                    fd-find \
                    fzf
            elif command_exists pacman; then
                log_info "Using pacman package manager"
                sudo pacman -S --noconfirm \
                    curl \
                    git \
                    base-devel \
                    unzip \
                    gettext \
                    cmake \
                    pkgconfig \
                    libtool \
                    autoconf \
                    automake \
                    wget \
                    ripgrep \
                    fd \
                    fzf
            else
                log_error "Unsupported Linux distribution. Please install dependencies manually."
                exit 1
            fi
            ;;
        "macos")
            if ! command_exists brew; then
                log_info "Installing Homebrew..."
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            fi
            log_info "Installing dependencies with Homebrew"
            brew install \
                curl \
                git \
                cmake \
                gettext \
                wget \
                ripgrep \
                fd \
                fzf
            ;;
        "windows")
            log_warning "Windows detected. Please use WSL2 or install dependencies manually."
            log_info "Required dependencies: git, curl, cmake, build tools"
            ;;
        *)
            log_error "Unsupported operating system: $os"
            exit 1
            ;;
    esac
    
    log_success "System dependencies installed"
}

# Install Neovim
install_neovim() {
    if command_exists nvim; then
        local current_version=$(nvim --version | head -n1 | grep -oP 'v\K[0-9]+\.[0-9]+\.[0-9]+')
        log_info "Neovim already installed (version: $current_version)"
        read -p "Do you want to reinstall/update Neovim? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            return
        fi
    fi

    local os=$(detect_os)
    log_info "Installing Neovim..."

    case $os in
        "linux")
            # Install latest stable release
            wget -O /tmp/nvim.tar.gz "https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz"
            sudo tar -C /opt -xzf /tmp/nvim.tar.gz
            sudo ln -sf /opt/nvim-linux64/bin/nvim /usr/local/bin/nvim
            rm /tmp/nvim.tar.gz
            ;;
        "macos")
            brew install neovim
            ;;
        *)
            log_error "Please install Neovim manually for your OS"
            exit 1
            ;;
    esac

    log_success "Neovim installed"
}

# Install oh-my-zsh if not present
install_oh_my_zsh() {
    if [ ! -d "$HOME/.oh-my-zsh" ]; then
        log_info "Installing Oh My Zsh..."
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
        log_success "Oh My Zsh installed"
    else
        log_info "Oh My Zsh already installed"
    fi
    
    # Install useful plugins
    local zsh_custom="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}"
    
    # zsh-autosuggestions
    if [ ! -d "$zsh_custom/plugins/zsh-autosuggestions" ]; then
        log_info "Installing zsh-autosuggestions plugin..."
        git clone https://github.com/zsh-users/zsh-autosuggestions "$zsh_custom/plugins/zsh-autosuggestions"
    fi
    
    # zsh-syntax-highlighting
    if [ ! -d "$zsh_custom/plugins/zsh-syntax-highlighting" ]; then
        log_info "Installing zsh-syntax-highlighting plugin..."
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$zsh_custom/plugins/zsh-syntax-highlighting"
    fi
    
    # fzf-tab (better tab completion with fzf)
    if [ ! -d "$zsh_custom/plugins/fzf-tab" ]; then
        log_info "Installing fzf-tab plugin..."
        git clone https://github.com/Aloxaf/fzf-tab "$zsh_custom/plugins/fzf-tab"
    fi
    
    log_success "Oh My Zsh plugins installed"
}
# Install mise
install_mise() {
    if command_exists mise; then
        log_info "mise already installed"
        return
    fi

    log_info "Installing mise..."
    curl https://mise.run | sh
    
    # Add mise to shell profile
    local shell_profile=""
    if [ -n "$ZSH_VERSION" ] || [ -f "$HOME/.zshrc" ]; then
        shell_profile="$HOME/.zshrc"
    elif [ -n "$BASH_VERSION" ]; then
        shell_profile="$HOME/.bashrc"
    else
        shell_profile="$HOME/.profile"
    fi
    
    if ! grep -q 'mise activate' "$shell_profile" 2>/dev/null; then
        echo 'eval "$(~/.local/bin/mise activate zsh)"' >> "$shell_profile"
        log_info "Added mise activation to $shell_profile"
    fi
    
    # Source mise for current session
    export PATH="$HOME/.local/bin:$PATH"
    eval "$(~/.local/bin/mise activate bash)"
    
    log_success "mise installed"
}

# Install programming languages and tools with mise
install_languages_and_tools() {
    log_info "Installing programming languages and tools with mise..."
    
    # Create .mise.toml configuration
    cat > ~/.mise.toml << 'EOF'
[tools]
# Programming Languages
node = "lts"
python = "3.12"
go = "latest"
rust = "latest"
lua = "5.4"
ruby = "3.3"
elixir = "1.16"
erlang = "26.2"

# Development Tools
ripgrep = "latest"
fd = "latest"
fzf = "latest"
git-delta = "latest"
lazygit = "latest"

# Language-specific tools
"npm:prettier" = "latest"
"npm:eslint" = "latest"
"npm:typescript" = "latest"
"npm:@types/node" = "latest"

# Python tools
"pipx:black" = "latest"
"pipx:flake8" = "latest"
"pipx:mypy" = "latest"
"pipx:pytest" = "latest"
"pipx:ipython" = "latest"

# Ruby tools
"gem:bundler" = "latest"
"gem:rails" = "latest"
"gem:rubocop" = "latest"
"gem:solargraph" = "latest"

# Go tools will be installed via go install
# Rust tools will be installed via cargo install
# Elixir tools will be installed via mix

[settings]
experimental = true
EOF

    # Install tools from .mise.toml
    mise install
    
    # Install additional Go tools
    log_info "Installing Go development tools..."
    mise exec go@latest -- go install golang.org/x/tools/gopls@latest
    mise exec go@latest -- go install github.com/go-delve/delve/cmd/dlv@latest
    mise exec go@latest -- go install honnef.co/go/tools/cmd/staticcheck@latest
    mise exec go@latest -- go install golang.org/x/tools/cmd/goimports@latest
    
    # Install additional Rust tools
    log_info "Installing Rust development tools..."
    mise exec rust@latest -- cargo install cargo-watch
    mise exec rust@latest -- cargo install cargo-edit
    mise exec rust@latest -- cargo install cargo-audit
    
    # Install additional Python tools that might not work with pipx
    log_info "Installing additional Python tools..."
    mise exec python@3.12 -- pip install debugpy
    
    # Install Ruby development tools
    log_info "Installing Ruby development tools..."
    mise exec ruby@3.3 -- gem install bundler rails rubocop solargraph debug
    
    # Install Elixir development tools
    log_info "Installing Elixir development tools..."
    mise exec elixir@1.16 -- mix local.hex --force
    mise exec elixir@1.16 -- mix local.rebar --force
    mise exec elixir@1.16 -- mix archive.install hex phx_new --force
    
    log_success "Languages and tools installed"
}

# Setup Neovim configuration
setup_neovim_config() {
    local config_dir="$HOME/.config/nvim"
    
    if [ -d "$config_dir" ]; then
        log_warning "Existing Neovim configuration found"
        read -p "Do you want to backup and replace it? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            mv "$config_dir" "${config_dir}.backup.$(date +%Y%m%d_%H%M%S)"
            log_info "Backed up existing configuration"
        else
            log_info "Skipping Neovim configuration setup"
            return
        fi
    fi
    
    log_info "Creating Neovim configuration directories..."
    mkdir -p "$config_dir/lua/config"
    mkdir -p "$config_dir/lua/plugins"
    mkdir -p "$config_dir/lua/ftplugin"
    
    log_success "Neovim configuration directory structure created"
    log_info "Please copy the configuration files from the previous artifact to:"
    log_info "  $config_dir"
}

# Create development directories
create_dev_dirs() {
    log_info "Creating development directories..."
    
    mkdir -p "$HOME/dev/projects"
    mkdir -p "$HOME/dev/learning"
    mkdir -p "$HOME/dev/scripts"
    mkdir -p "$HOME/.config/nvim/undodir"
    
    log_success "Development directories created"
}

# Setup shell and functions
setup_shell_enhancements() {
    log_info "Setting up shell enhancements..."
    
    local shell_profile=""
    if [ -n "$ZSH_VERSION" ]; then
        shell_profile="$HOME/.zshrc"
    elif [ -n "$BASH_VERSION" ]; then
        shell_profile="$HOME/.bashrc"
    else
        shell_profile="$HOME/.profile"
    fi
}

# Verify installation
verify_installation() {
    log_info "Verifying installation..."
    
    local failed=0
    
    # Check Neovim
    if command_exists nvim; then
        local nvim_version=$(nvim --version | head -n1)
        log_success "Neovim: $nvim_version"
    else
        log_error "Neovim not found"
        failed=1
    fi
    
    # Check mise
    if command_exists mise; then
        local mise_version=$(mise --version)
        log_success "mise: $mise_version"
    else
        log_error "mise not found"
        failed=1
    fi
    
    # Check installed tools
    local tools=("node" "python" "go" "rustc" "lua" "ruby" "elixir" "rg" "fd" "fzf")
    for tool in "${tools[@]}"; do
        if command_exists "$tool"; then
            log_success "$tool installed"
        else
            log_warning "$tool not found in PATH (may need shell restart)"
        fi
    done
    
    if [ $failed -eq 0 ]; then
        log_success "Installation verification completed successfully!"
    else
        log_error "Some components failed verification"
        return 1
    fi
}

# Print post-install instructions
print_post_install() {
    log_info "Installation completed! Next steps:"
    echo
    echo "1. Restart your terminal or run: source ~/.$(basename $SHELL)rc"
    echo "2. Copy the Neovim configuration files to ~/.config/nvim/"
    echo "3. Start Neovim: nvim"
    echo "4. Wait for plugins to install automatically"
    echo "5. Run :checkhealth in Neovim to verify everything works"
    echo
    echo "Useful commands:"
    echo "  mise list           - Show installed tools"
    echo "  mise install        - Install tools from .mise.toml"
    echo "  mise upgrade        - Update all tools"
    echo "  mise use ruby@3.2     - Use specific version locally"
    echo "  newproject myapp elixir - Create new Elixir project"
    echo "  be rspec              - Run RSpec with Bundler"
    echo "  iex -S mix            - Start Elixir REPL with project"
    echo
    echo "Development directories created in ~/dev/"
    echo "Happy coding! 🚀"
}

# Main installation function
main() {
    log_info "Starting local development environment setup..."
    echo
    
    # Confirmation
    read -p "This will install Neovim, mise, and development tools. Continue? (Y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        log_info "Installation cancelled"
        exit 0
    fi
    
    # Run installation steps
    install_system_deps
    install_neovim
    install_oh_my_zsh
    install_mise
    install_languages_and_tools
    setup_neovim_config
    create_dev_dirs
    setup_shell_enhancements
    
    echo
    verify_installation
    
    echo
    print_post_install
}

# Run main function
main "$@"
