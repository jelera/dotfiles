#!/bin/bash

# It pretty prints a basic system info
sysinfo() {
	# => Distro Detection
	if grep -qiE 'centos|fedora|rhel' /etc/os-release ; then
		distro="redhat"
	elif grep -qiE 'precise|trusty|qiana' /etc/os-release ; then
		distro="ubuntu"
	elif grep -qiE 'wheezy|jessie' /etc/os-release ; then
		distro="debian"
	elif grep -qiE 'arch' /etc/os-release ; then
		distro="archlinux"
	fi

	# => Get number of installed packages
	if [[ $distro == "ubuntu" || $distro == "debian" ]]; then
		pckgs=$(dpkg --get-selections | wc -l)
	elif [[ $distro == "archlinux" ]]; then
		pckgs=$(pacman -Qq | wc -l)
	elif [[ $distro == "redhat" ]]; then
		pckgs=$(rpm -qa | wc -l)
	fi

	user_fullname=$(getent passwd $USER | awk -F: '{ print $5}')

	printf "${txtylw}%13s, ${bldylw}%s" "Welcome" "$user_fullname"
	echo
	printf "${bldred}%13s: ${txtgrn}%s\n" "Today is" "$(date -R)"
	echo
	printf "${bldred}%13s: ${bldcyn}%s\n" "Hostname" "$(cat /etc/hostname)"
	printf "${bldred}%13s: ${txtcyn}%s\n" "OS" "$(awk ' /PRETTY/ { split($0,a,"\""); print a[2] } ' /etc/os-release)"
	printf "${bldred}%13s: ${txtcyn}%s\n" "Kernel Info" "$(uname -smr)"
	printf "${bldred}%13s: ${txtcyn}%s\n" "Packages" "${pckgs}"
	echo
	printf "${bldred}%13s: ${txtcyn}%s\n" "Uptime" "$(uptime -p | sed 's/up //')"
	printf "${bldred}%13s: ${txtcyn}%s\n" "Load Average" "$(uptime | awk 'BEGIN {FS=":";} {print $4}')"
	echo
	printf "${bldred}%13s: ${txtcyn}%s\n" "Model" "$(cat /sys/class/dmi/id/product_version)"
	printf "${bldred}%13s: ${txtcyn}%s\n" "CPU" "$(awk '/model name/ { print $4, $5, $6, $7, $8, $9; exit;}' /proc/cpuinfo)"
	printf "${bldred}%13s: ${txtcyn}%s\n" "RAM" "$(free -h | awk '/Mem/ { printf "%5s /%5s", $3, $2 }')"
	printf "${bldred}%13s: ${txtcyn}%s${txtrst}\n" "Storage" "$(df -h --total | awk '/total/ { printf "%5s /%5s" ,$3 ,$2} ' )"
}

# It extracts from a bunch of compression and archiving formats
extract()
{
	if [ -f "$1" ] ; then
		case "$1" in
			*.tar.bz2) tar xjf "$1" ;;
			*.tar.gz) tar xzf "$1" ;;
			*.tar.Z) tar xzf "$1" ;;
			*.bz2) bunzip2 "$1" ;;
			*.rar) unrar x "$1" ;;
			*.gz) gunzip "$1" ;;
			*.jar) unzip "$1" ;;
			*.tar) tar xf "$1" ;;
			*.tbz2) tar xjf "$1" ;;
			*.tgz) tar xzf "$1" ;;
			*.zip) unzip "$1" ;;
			*.Z) uncompress "$1" ;;
			*) echo "'$1' cannot be extracted." ;;
		esac
	else
		echo "'$1' is not a file."
	fi
}

localnet ()
{
	/sbin/ifconfig | awk /'inet addr/ {print $2}'
	echo ""
	/sbin/ifconfig | awk /'Bcast/ {print $3}'
	echo ""
}

# Looks for the ip of this computer
myip ()
{
	# lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | grep "Current IP Address" | cut -d":" -f2 | cut -d" " -f2
	curl icanhazip.com
}

# Shows the uptime for this terminal
#upinfo ()
#{
	#echo -ne "${txtgrn}$HOSTNAME ${txtred}uptime is ${txtcyn} \t ";uptime | awk /'up/ {print $3,$4,$5,$6,$7,$8,$9,$10}'
#}

# Fetch the weather from Weather Underground
weather ()
{
	curl -s "http://api.wunderground.com/auto/wui/geo/ForecastXML/index.xml?query=${@:-<YOURZIPORLOCATION>}"|perl -ne '/<title>([^<]+)/&&printf "\x1B[0;34m%s\x1B[0m: ",$1;/<fcttext>([^<]+)/&&print $1,"\n"';
}


# Encrypts using GNUPG
encrypt ()
{
	gpg -ac --no-options "$1"
}

decrypt ()
{
	gpg --no-options "$1"
}

# Creates a directory and sets the PWD to it
take ()
{
	mkdir -p $1
	cd $1
}

convert_video_to_mp4 () {
	find . -name '*.mov' -print0 | xargs -0 -I xxx ffmpeg -i xxx -f mp4 -vcodec mpeg4 -qscale 0 xxx.mp4
	find . -iname '*.mov.mp4' -print0 | xargs -0 rename 's/\.mov\.mp4$/\.mp4/i'
	mkdir ./oldmovies/
	find . -iname '*.mov' -print0 | xargs -0 -I fff mv fff ./oldmovies/
}
