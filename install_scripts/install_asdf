#!/usr/bin/env ruby
# frozen_string_literal: true

require 'mkmf'
require_relative 'lib/helpers'
require_relative 'lib/color_output'
require_relative 'lib/package_installer'
require_relative 'lib/command_runner'

class AsdfInstaller
  include Helpers::OS

  def self.call
    new.call
  end

  def initialize; end

  def call
    install_asdf
    install_ruby
    install_python
    install_node
  end

  private


  def install_asdf
    return ColorOutput.call(:blue, padding: false) {puts 'Skipping installing ASDF'} if find_executable 'asdf'

    latest_asdf_version = 'v0.10.2'


    install_asdf_dependencies

    ColorOutput.call {puts 'Installing asdf ...'}

    system("git clone https://github.com/asdf-vm/asdf.git #{Dir.home}/.asdf --branch #{latest_asdf_version}")
  end

  def install_asdf_dependencies
    ColorOutput.call {puts 'Installing asdf Dependencies...'}

    PackageInstaller.run(
      ubuntu: %[curl git],
      fedora: %[curl git]
    )
  end

  def install_ruby
    return ColorOutput.call(:blue, padding: false) {puts 'Ruby is already installed with ASDF'} if installed?("ruby")

    install_version = "3.1.2"

    install_ruby_dependencies

    if mac_os?
      ColorOutput.call {puts 'Setting ENV VARS for mac os'}
      CommandRunner.run(mac_os: 'export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"')
    end

    ColorOutput.call {puts 'Installing Ruby with asdf ...'}
    system('asdf plugin add ruby https://github.com/asdf-vm/asdf-ruby.git')
    system("asdf install ruby #{install_version}")
    system("asdf global ruby #{install_version}")
  end

  def install_ruby_dependencies
    ColorOutput.call {puts 'Installing Ruby Dependencies ...'}
    PackageInstaller.run(
      ubuntu: 'autoconf bison build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm6 libgdbm-dev libdb-dev uuid-dev',
      fedora: 'gcc make bzip2 openssl-devel libyaml-devel libffi-devel readline-devel zlib-devel gdbm-devel ncurses-devel',
      mac_os: 'openssl@1.1 readline libyaml'
    )
  end

  def install_python
    return ColorOutput.call(:blue, padding: false) {puts 'Python is already installed with ASDF'} if installed?("python")

    install_version = "3.10.6"

    install_python_dependencies

    ColorOutput.call {puts 'Installing Python with asdf ...'}
    system('asdf plugin-add python')
    system("asdf install python #{install_version}")
    system("asdf global python #{install_version}")
  end

  def install_python_dependencies
    ColorOutput.call {puts 'Installing Python Dependencies ...'}
    PackageInstaller.run(
      mac_os: 'openssl readline sqlite3 xz zlib tcl-tk',
      ubuntu: 'make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev',
      fedora: 'make gcc zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel tk-devel libffi-devel xz-devel'
    )
  end

  def install_node
    return ColorOutput.call(:blue, padding: false) {puts 'Node.js is already installed with ASDF'} if installed?("nodejs")

    install_version = "lts-gallium"

    ColorOutput.call {puts 'Installing Node.js with asdf ...'}
    system('asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git')
    system("asdf install nodejs #{install_version}")
    system("asdf global nodejs #{install_version}")

  end

  def install_node_dependencies
    ColorOutput.call {puts 'Installing Node.js Dependencies ...'}

    if mac_os?
      ColorOutput.call {puts 'Installing Xcode ...'}

      CommandRunner.run(mac_os: 'xcode-select --install')
    end

    PackageInstaller.run(
      ubuntu: 'python3 g++ make python3-pip',
      fedora: 'python3 gcc-c++ make python3-pip'
    )
  end

  def installed?(lang)
    !(`asdf list #{lang}`.empty?)
  end
end

AsdfInstaller.call
