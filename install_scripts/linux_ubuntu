#!/bin/bash
###############################################################################
#         Name: linux_ubuntu
#        Usage: ./linux_ubuntu
#
#  Description: This is a helper script that automates the installation of
#                software for Development, SysAdmin, etc.
#
# Last Updated: Sun 11 Jan 2015 09:46:46 PM CST
#
#    Tested on: Ubuntu 14.04 LTS Trusty Tahr
#
#   Maintainer: Jose Elera (https://github.com/jelera)
#     Based on: https://github.com/thoughtbot/laptop
#      License: MIT
#               Copyright (c) 2014 Jose Elera Campana
#               Permission is hereby granted, free of charge, to any person
#               obtaining a copy of this software and associated documentation
#               files (the "Software"), to deal in the Software without
#               restriction, including without limitation the rights to use,
#               copy, modify, merge, publish, distribute, sublicense, and/or
#               sell copies of the Software, and to permit persons to whom the
#               Software is furnished to do so, subject to the following
#               conditions:
#
#               The above copyright notice and this permission notice shall be
#               included in all copies or substantial portions of the Software.
#
#               THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#               EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
#               OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#               NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
#               HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
#               WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#               FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#               OTHER DEALINGS IN THE SOFTWARE.
###############################################################################


#----------------------------------------------------------------------------//
# => HELPER FUNCTIONS
#----------------------------------------------------------------------------//
function color_echo(){
	# Usage  : color_echo "string" color
	# Credit : http://stackoverflow.com/a/23006365/428786
	local exp=$1;
	local color=$2;
	if ! [[ $color =~ '^[0-9]$' ]] ; then
		case $(echo $color | tr '[:upper:]' '[:lower:]') in
			black) color=0 ;;
			red) color=1 ;;
			green) color=2 ;;
			yellow) color=3 ;;
			blue) color=4 ;;
			magenta) color=5 ;;
			cyan) color=6 ;;
			white|*) color=7 ;; # white or invalid color
		esac
	fi
	tput setaf $color;
	printf "\n$exp\n"
	tput sgr0;
}


append_to_zshrc() {
	local text="$1" zshrc
	local skip_new_line="$2"

	if [[ -w "$HOME/.zshrc.local" ]]; then
		zshrc="$HOME/.zshrc.local"
	else
		zshrc="$HOME/.zshrc"
	fi

	if ! grep -Fqs "$text" "$zshrc"; then
		if (( skip_new_line )); then
			printf "%s\n" "$text" >> "$zshrc"
		else
			printf "\n%s\n" "$text" >> "$zshrc"
		fi
	fi
}


#----------------------------------------------------------------------------//
# => SET TRAP
#----------------------------------------------------------------------------//
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT
set -e


#----------------------------------------------------------------------------//
# => CHECK $HOME/.bin and .zshrc
#----------------------------------------------------------------------------//
if [[ ! -d "$HOME/.bin/" ]]; then
	mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
	touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'


#----------------------------------------------------------------------------//
# => CHECK LINUX DISTRO
#----------------------------------------------------------------------------//
if ! grep -qiE 'wheezy|jessie|precise|trusty' /etc/os-release; then
	color_echo "Sorry! we don't currently support that distro." red
	exit 1
fi


#----------------------------------------------------------------------------//
# => UPDATE THE SYSTEM
#----------------------------------------------------------------------------//
color_echo "Updating system packages ..." cyan
  sudo apt-get update && sudo apt-get upgrade -y


#----------------------------------------------------------------------------//
# => INSTALL SOFTWARE FROM REPOS
#----------------------------------------------------------------------------//
color_echo "Installing Build Essentials ..." cyan
  sudo apt-get install -y build-essential

color_echo "Installing Build Dependencies for Ruby, Python, Lua and Perl..." cyan
  sudo apt-get build-dep -y ruby-defaults python-defaults perl lua5.2

color_echo "Installing Ruby, Python, Python3, Perl and Lua" cyan
  sudo apt-get install -y ruby ruby-all-dev python-all python-pip python-all-dev python3-all python3-pip python3-all-dev lua5.2 perl

color_echo "Installing git, for source control management ..." cyan
  sudo apt-get install -y git-all

color_echo "Installing libraries for common dependencies ..." cyan
  sudo apt-get install -y libxslt1-dev libcurl4-openssl-dev libksba8 libksba-dev libqtwebkit-dev libreadline-dev

color_echo "Installing sqlite3, embeddable SQL database engine" cyan
 sudo apt-get install -y sqlite3 libsqlite3-dev

color_echo "Installing Postgres, a great open source relational database ..." cyan
  sudo apt-get install -y postgresql postgresql-server-dev-all

color_echo "Installing Redis, an advanced key-value database ..." cyan
  sudo apt-get install -y redis-server

color_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..." cyan
  sudo apt-get install -y exuberant-ctags

color_echo "installing Vim ..." cyan
  sudo apt-get install -y vim-gtk

color_echo "installing tmux, a terminal multiplexer" cyan
  sudo apt-get install -y tmux

color_echo "Installing ImageMagick, to crop and resize images ..." cyan
  sudo apt-get install -y imagemagick

color_echo "Installing curl ..." cyan
  sudo apt-get install -y curl

color_echo "Installing zsh ..." cyan
  sudo apt-get install -y zsh

color_echo "Installing node.js and npm ..." cyan
  sudo apt-get install -y nodejs npm

color_echo "Installing LAMP Server ..." cyan
  sudo apt-get install -y lamp-server^

color_echo "Installing jsctags, ctags for JavaScript  with Tern.js" cyan
  sudo npm install -g git://github.com/ramitos/jsctags.git

color_echo "Installing jshint, an opinionated lint program for JS" cyan
  sudo npm install -g jshint

color_echo "Installing Jedi, for enhanced Python autocompletion in Vim" cyan
  sudo pip install jedi

color_echo "Installing Ag, the silver searcher, grep for programmers" cyan
  sudo apt-get install -y silversearcher-ag

#----------------------------------------------------------------------------//
# => INSTALL IPYTHON NOTEBOOK (SYSTEM-WIDE)
#----------------------------------------------------------------------------//
color_echo "Installing IPython 2/3 notebook" cyan
  sudo apt-get install -y ipython ipython3 ipython-notebook ipython3-notebook

color_echo "Installing IPython 2/3 Qt console" cyan
  sudo apt-get install -y ipython-qtconsole ipython3-qtconsole


#----------------------------------------------------------------------------//
# => INSTALL SCIPY STACK
#----------------------------------------------------------------------------//
color_echo "Installing SciPy Stack ..." cyan
  sudo apt-get install -y python-numpy python-scipy python-matplotlib python-pandas python-sympy python-nose

#----------------------------------------------------------------------------//
# => INSTALL RBENV, RUBY AND GEMS MANAGEMENT
#----------------------------------------------------------------------------//
if [[ ! -d "$HOME/.rbenv" ]]; then
  color_echo "Installing rbenv, to change Ruby versions ..." cyan
    git clone https://github.com/sstephenson/rbenv.git ~/.rbenv

    append_to_zshrc 'export PATH="$HOME/.rbenv/bin:$PATH"'
    append_to_zshrc 'eval "$(rbenv init - zsh --no-rehash)"' 1

    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init - zsh)"
fi

if [[ ! -d "$HOME/.rbenv/plugins/rbenv-gem-rehash" ]]; then
  color_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..." cyan
    git clone https://github.com/sstephenson/rbenv-gem-rehash.git \
      ~/.rbenv/plugins/rbenv-gem-rehash
fi

if [[ ! -d "$HOME/.rbenv/plugins/ruby-build" ]]; then
  color_echo "Installing ruby-build, to install Rubies ..." cyan
    git clone https://github.com/sstephenson/ruby-build.git \
      ~/.rbenv/plugins/ruby-build
fi


#----------------------------------------------------------------------------//
# => SETUP RUBY ENVIRONMENT
#----------------------------------------------------------------------------//
ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"

color_echo "Installing Ruby $ruby_version ..." cyan
  rbenv install -s "$ruby_version"

color_echo "Setting $ruby_version as global default Ruby ..." cyan
  rbenv global "$ruby_version"
  rbenv rehash

color_echo "Updating to latest Rubygems version ..." cyan
  gem update --system


#----------------------------------------------------------------------------//
# => BUNDLER FOR RUBY GEM INSTALLATION
#----------------------------------------------------------------------------//
color_echo "Installing Bundler to install project-specific Ruby gems ..." cyan
  gem install bundler --no-document --pre

color_echo "Configuring Bundler for faster, parallel gem installation ..." cyan
  number_of_cores=$(nproc)
  bundle config --global jobs $((number_of_cores - 1))




#----------------------------------------------------------------------------//
# => INSTALL PYENV, PYTHON 2 AND 3 VERSION AND MODULE MANAGEMENT
#----------------------------------------------------------------------------//
if [[ ! -d "$HOME/.pyenv" ]]; then
  color_echo "Installing pyenv, to change Python versions ..." cyan
    curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash
fi


#----------------------------------------------------------------------------//
# => CHANGING THE SHELL TO ZSH
#----------------------------------------------------------------------------//
color_echo "Changing your shell to zsh ..." blue
  chsh -s /bin/zsh
