#!/bin/bash

# install-linters-formatters.sh
# Install popular linters and formatters using mise

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if mise is installed
check_mise() {
    if ! command -v mise &> /dev/null; then
        print_error "mise is not installed. Please install mise first:"
        echo "  curl https://mise.run | sh"
        exit 1
    fi
    print_success "mise is installed"
}

# Install a tool with error handling
install_tool() {
    local tool=$1
    local description=$2
    
    print_status "Installing $description ($tool)..."
    
    if mise install "$tool" 2>/dev/null; then
        print_success "$description installed successfully"
    else
        print_warning "Failed to install $description - it might already be installed or unavailable"
    fi
}

# Main installation function
main() {
    print_status "Starting installation of linters and formatters..."
    
    check_mise
    
    # Update mise plugins
    print_status "Updating mise plugins..."
    mise plugins update
    
    echo
    print_status "Installing Shell tools..."
    # Shell (Bash/Zsh)
    install_tool "shellcheck@latest" "ShellCheck (Shell linter)"
    install_tool "shfmt@latest" "shfmt (Shell formatter)"
    
    echo
    print_status "Installing Ruby tools..."
    # Ruby
    install_tool "ruby@latest" "Ruby runtime (required for RuboCop)"
    # Note: RuboCop needs to be installed via gem after Ruby is available
    
    echo
    print_status "Installing JavaScript/TypeScript tools..."
    # JavaScript/TypeScript (via Node.js)
    install_tool "node@latest" "Node.js (required for JS/TS tools)"
    
    echo
    print_status "Installing Python tools..."
    # Python
    install_tool "python@latest" "Python (required for Python tools)"
    
    echo
    print_status "Installing Go tools..."
    # Go
    install_tool "golang@latest" "Go (required for Go tools)"
    
    echo
    print_status "Installing Lua tools..."
    # Lua
    install_tool "lua@latest" "Lua (required for Lua tools)"
    
    # SQL and Markdown tools are typically installed via package managers
    # after the base languages are available
    
    echo
    print_status "Installing additional tools via their respective package managers..."
    
    # Install Ruby gems
    if command -v gem &> /dev/null; then
        print_status "Installing RuboCop..."
        # Ensure we're using mise's Ruby and gems
        mise reshim ruby
        
        # Install rake first to avoid native extension issues
        gem install rake 2>/dev/null || print_warning "Failed to install rake"
        
        # Install RuboCop gems one by one for better error handling
        gem install rubocop 2>/dev/null && print_success "RuboCop installed" || print_warning "Failed to install RuboCop - try: mise exec ruby -- gem install rubocop"
        gem install rubocop-performance 2>/dev/null && print_success "RuboCop Performance installed" || print_warning "Failed to install rubocop-performance"
        gem install rubocop-rails 2>/dev/null && print_success "RuboCop Rails installed" || print_warning "Failed to install rubocop-rails"
    else
        print_warning "gem command not found. Make sure Ruby is properly installed via mise."
    fi
    
    # Install Node.js packages globally
    if command -v npm &> /dev/null; then
        print_status "Installing JavaScript/TypeScript tools via npm..."
        
        # ESLint and plugins
        npm install -g eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin 2>/dev/null || print_warning "Failed to install ESLint"
        
        # Prettier
        npm install -g prettier 2>/dev/null || print_warning "Failed to install Prettier"
        
        # TypeScript compiler
        npm install -g typescript 2>/dev/null || print_warning "Failed to install TypeScript"
        
        # Markdown tools
        npm install -g markdownlint-cli 2>/dev/null || print_warning "Failed to install markdownlint"
        
        # SQL formatter
        npm install -g sql-formatter 2>/dev/null || print_warning "Failed to install sql-formatter"
    fi
    
    # Install Python packages
    if command -v python &> /dev/null && command -v pip &> /dev/null; then
        print_status "Installing Python tools via pip..."
        # Ensure we're using mise's Python
        mise reshim python
        
        # Install Python tools one by one for better error handling
        python -m pip install --user --upgrade pip 2>/dev/null || print_warning "Failed to upgrade pip"
        
        python -m pip install --user black 2>/dev/null && print_success "Black installed" || print_warning "Failed to install Black"
        python -m pip install --user flake8 2>/dev/null && print_success "Flake8 installed" || print_warning "Failed to install Flake8"
        python -m pip install --user pylint 2>/dev/null && print_success "Pylint installed" || print_warning "Failed to install Pylint"
        python -m pip install --user mypy 2>/dev/null && print_success "MyPy installed" || print_warning "Failed to install MyPy"
        python -m pip install --user isort 2>/dev/null && print_success "isort installed" || print_warning "Failed to install isort"
        
        # SQL linter (often has dependency issues)
        print_status "Installing SQLFluff (this may take a while)..."
        python -m pip install --user sqlfluff 2>/dev/null && print_success "SQLFluff installed" || {
            print_warning "Failed to install SQLFluff via pip."
            print_status "Alternative installation methods for SQLFluff:"
            echo "  • Try: python -m pip install --user --no-deps sqlfluff"
            echo "  • Or use pipx: pipx install sqlfluff"
            echo "  • Or use conda: conda install -c conda-forge sqlfluff"
        }
    else
        print_warning "python or pip command not found. Make sure Python is properly installed via mise."
        print_status "Try running: mise install python@latest && mise global python@latest"
    fi
    
    # Install Go tools
    if command -v go &> /dev/null; then
        print_status "Installing Go tools..."
        
        # Go linters and formatters
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest 2>/dev/null || print_warning "Failed to install golangci-lint"
        go install mvdan.cc/gofumpt@latest 2>/dev/null || print_warning "Failed to install gofumpt"
    fi
    
    # Install Lua tools
    if command -v luarocks &> /dev/null; then
        print_status "Installing Lua tools via luarocks..."
        luarocks install luacheck 2>/dev/null || print_warning "Failed to install luacheck"
    fi
    
    echo
    print_success "Installation complete!"
    
    echo
    print_status "Troubleshooting common issues:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "If tools are not found after installation:"
    echo "  • Run: mise reshim"
    echo "  • Restart your shell or run: source ~/.bashrc (or ~/.zshrc)"
    echo
    echo "RuboCop installation issues:"
    echo "  • Try: mise exec ruby -- gem install rubocop"
    echo "  • Or: cd to a project directory and use bundle install with a Gemfile"
    echo
    echo "Python tools not found:"
    echo "  • Make sure ~/.local/bin is in your PATH"
    echo "  • Try: export PATH=\"\$HOME/.local/bin:\$PATH\""
    echo "  • Or use: python -m black, python -m flake8, etc."
    echo
    echo "SQLFluff issues:"
    echo "  • Consider using pipx: pipx install sqlfluff"
    echo "  • Or conda: conda install -c conda-forge sqlfluff"
    echo
    
    echo
    print_status "Installed tools summary:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo "Shell:"
    echo "  • ShellCheck - Shell script linter"
    echo "  • shfmt - Shell script formatter"
    echo
    echo "Ruby:"
    echo "  • RuboCop - Ruby linter and formatter"
    echo "  • rubocop-performance - Performance cops for RuboCop"
    echo "  • rubocop-rails - Rails-specific cops for RuboCop"
    echo
    echo "JavaScript/TypeScript:"
    echo "  • ESLint - JavaScript/TypeScript linter"
    echo "  • Prettier - Code formatter"
    echo "  • TypeScript - TypeScript compiler and tools"
    echo
    echo "Python:"
    echo "  • Black - Python code formatter"
    echo "  • Flake8 - Python linter"
    echo "  • Pylint - Python static analysis"
    echo "  • MyPy - Python type checker"
    echo "  • isort - Python import sorter"
    echo
    echo "Go:"
    echo "  • golangci-lint - Go meta-linter"
    echo "  • gofumpt - Stricter Go formatter"
    echo
    echo "Lua:"
    echo "  • luacheck - Lua static analyzer"
    echo
    echo "SQL:"
    echo "  • sql-formatter - SQL formatter (Node.js)"
    echo "  • sqlfluff - SQL linter and formatter (Python)"
    echo
    echo "Markdown:"
    echo "  • markdownlint - Markdown linter"
    echo
    print_status "You may need to restart your shell or run 'mise reshim' to use the installed tools."
    print_status "Add ~/.local/bin to your PATH if Python tools aren't found: export PATH=\"\$HOME/.local/bin:\$PATH\""
    
    echo
    print_status "To configure these tools in your projects, consider creating:"
    echo "  • .eslintrc.js for ESLint"
    echo "  • .prettierrc for Prettier"
    echo "  • pyproject.toml for Python tools"
    echo "  • .rubocop.yml for RuboCop"
    echo "  • .golangci.yml for golangci-lint"
    echo "  • .luacheckrc for luacheck"
    echo "  • .markdownlint.json for markdownlint"
}

# Run main function
main "$@"
